import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  onAuthStateChanged,
  signOut,
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js";
import {
  getFirestore,
  doc,
  setDoc,
  getDoc,
  updateDoc,
  arrayUnion,
  runTransaction,
  collection,
  query,
  where,
  getDocs,
  onSnapshot,
} from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyBvTtAiVdBFL3D9S7p77o59Osqvr3g5o5w",
  authDomain: "idle-bank-ecd4c.firebaseapp.com",
  projectId: "idle-bank-ecd4c",
  storageBucket: "idle-bank-ecd4c.appspot.com",
  messagingSenderId: "620382532734",
  appId: "1:620382532734:web:2bf17700e3ea279709142f",
  measurementId: "G-RL9Q74FR4K",
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// DOM Elements
const authSection = document.getElementById("auth-section");
const appSection = document.getElementById("app-section");

const regForm = document.getElementById("register-form");
const loginForm = document.getElementById("login-form");
const authMessage = document.getElementById("auth-message");

const userEmailElem = document.getElementById("user-email");
const balanceElem = document.getElementById("balance");
const logoutBtn = document.getElementById("logout-btn");

const transferForm = document.getElementById("transfer-form");
const recipientEmailInput = document.getElementById("recipient-email");
const transferAmountInput = document.getElementById("transfer-amount");
const appMessage = document.getElementById("app-message");

const historyList = document.getElementById("history-list");

// Helper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function showAuthMessage(msg, isError = false) {
  authMessage.textContent = msg;
  authMessage.style.color = isError ? "#f44336" : "#f9d34b";
}

function showAppMessage(msg, isError = false) {
  appMessage.textContent = msg;
  appMessage.style.color = isError ? "#f44336" : "#f9d34b";
}

// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
async function createUserDoc(user) {
  const userRef = doc(db, "users", user.uid);
  await setDoc(userRef, {
    email: user.email,
    balance: 1000,
    history: [],
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
regForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  const email = regForm["reg-email"].value.trim();
  const password = regForm["reg-password"].value;

  showAuthMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...");

  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    await createUserDoc(userCredential.user);
    showAuthMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
    regForm.reset();
  } catch (e) {
    showAuthMessage(e.message, true);
  }
});

// –í—Ö–æ–¥
loginForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  const email = loginForm["login-email"].value.trim();
  const password = loginForm["login-password"].value;

  showAuthMessage("–í—Ö–æ–¥...");

  try {
    await signInWithEmailAndPassword(auth, email, password);
    showAuthMessage("");
    loginForm.reset();
  } catch (e) {
    showAuthMessage(e.message, true);
  }
});

// –í—ã—Ö–æ–¥
logoutBtn.addEventListener("click", async () => {
  await signOut(auth);
  appMessage.textContent = "";
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
let currentUser = null;
let unsubscribeBalance = null;

onAuthStateChanged(auth, async (user) => {
  if (user) {
    currentUser = user;
    authSection.style.display = "none";
    appSection.style.display = "block";
    userEmailElem.textContent = user.email;

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
    if (unsubscribeBalance) unsubscribeBalance();

    const userDocRef = doc(db, "users", user.uid);

    unsubscribeBalance = onSnapshot(userDocRef, (docSnap) => {
      if (docSnap.exists()) {
        const data = docSnap.data();
        balanceElem.textContent = data.balance.toFixed(2);
        renderHistory(data.history);
      }
    });
  } else {
    currentUser = null;
    authSection.style.display = "block";
    appSection.style.display = "none";
    if (unsubscribeBalance) unsubscribeBalance();
  }
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
function renderHistory(history = []) {
  historyList.innerHTML = "";
  if (history.length === 0) {
    historyList.innerHTML = "<li>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</li>";
    return;
  }
  for (const entry of history.slice().reverse()) {
    const li = document.createElement("li");
    li.textContent = entry;
    historyList.appendChild(li);
  }
}

// –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
transferForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  showAppMessage("");

  const recipientEmail = recipientEmailInput.value.trim();
  const amount = parseFloat(transferAmountInput.value);

  if (!recipientEmail || !amount || amount <= 0) {
    showAppMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", true);
    return;
  }
  if (!currentUser) {
    showAppMessage("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", true);
    return;
  }
  if (recipientEmail === currentUser.email) {
    showAppMessage("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ", true);
    return;
  }

  try {
    await transferMoney(currentUser.uid, recipientEmail, amount);
    showAppMessage(`–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount.toFixed(2)} ü™ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${recipientEmail}`);
    transferForm.reset();
  } catch (e) {
    showAppMessage(e.message, true);
  }
});

async function transferMoney(fromUID, toEmail, amount) {
  const usersRef = collection(db, "users");
  const q = query(usersRef, where("email", "==", toEmail));
  const querySnapshot = await getDocs(q);

  if (querySnapshot.empty) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");

  const toDoc = querySnapshot.docs[0];
  const toUID = toDoc.id;

  const fromDocRef = doc(db, "users", fromUID);
  const toDocRef = doc(db, "users", toUID);

  await runTransaction(db, async (transaction) => {
    const fromSnap = await transaction.get(fromDocRef);
    const toSnap = await transaction.get(toDocRef);

    const fromData = fromSnap.data();
    const toData = toSnap.data();

    if (fromData.balance < amount) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤");
    }

    transaction.update(fromDocRef, {
      balance: fromData.balance - amount,
      history: arrayUnion(
        `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount.toFixed(2)} ü™ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${toEmail} (${new Date().toLocaleString()})`
      ),
    });

    transaction.update(toDocRef, {
      balance: toData.balance + amount,
      history: arrayUnion(
        `–ü–æ–ª—É—á–µ–Ω–æ ${amount.toFixed(2)} ü™ô –æ—Ç ${fromData.email} (${new Date().toLocaleString()})`
      ),
    });
  });
}
